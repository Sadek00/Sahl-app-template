// <auto-generated />
using System;
using AppTemplate.Domain.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AppTemplate.Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240701010447_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppTemplate.Domain.Entities.Admin.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("departmentid");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("integer")
                        .HasColumnName("designationid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("isadmin");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("islocked");

                    b.Property<int>("LoginTryCount")
                        .HasColumnType("integer")
                        .HasColumnName("logintrycount");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("securitystamp");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("usertypeid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_users_departmentid");

                    b.HasIndex("DesignationId")
                        .HasDatabaseName("ix_users_designationid");

                    b.HasIndex("UserTypeId")
                        .HasDatabaseName("ix_users_usertypeid");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AppTemplate.Domain.Entities.Admin.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<bool>("IsModule")
                        .HasColumnType("boolean")
                        .HasColumnName("ismodule");

                    b.Property<bool>("IsParent")
                        .HasColumnType("boolean")
                        .HasColumnName("isparent");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("isvisible");

                    b.Property<byte?>("LevelAt")
                        .HasColumnType("smallint")
                        .HasColumnName("levelat");

                    b.Property<string>("MenuIcon")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("menuicon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<bool?>("ShowMenu")
                        .HasColumnType("boolean")
                        .HasColumnName("showmenu");

                    b.Property<short?>("SortId")
                        .HasColumnType("smallint")
                        .HasColumnName("sortid");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_menus");

                    b.ToTable("menus", (string)null);
                });

            modelBuilder.Entity("AppTemplate.Domain.Entities.Admin.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationuserid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("ApplicationUserId")
                        .HasDatabaseName("ix_roles_applicationuserid");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("AppTemplate.Domain.Entities.Admin.RoleMenuPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("menuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.HasKey("Id")
                        .HasName("pk_rolemenupermissions");

                    b.HasIndex("MenuId")
                        .HasDatabaseName("ix_rolemenupermissions_menuid");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_rolemenupermissions_roleid");

                    b.ToTable("rolemenupermissions", (string)null);
                });

            modelBuilder.Entity("AppTemplate.Domain.Entities.Admin.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.HasKey("Id")
                        .HasName("pk_usertypes");

                    b.ToTable("usertypes", (string)null);
                });

            modelBuilder.Entity("AppTemplate.Domain.Entities.Settings.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("AppTemplate.Domain.Entities.Settings.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.HasKey("Id")
                        .HasName("pk_designations");

                    b.ToTable("designations", (string)null);
                });

            modelBuilder.Entity("AppTemplate.Domain.Entities.Admin.ApplicationUser", b =>
                {
                    b.HasOne("AppTemplate.Domain.Entities.Settings.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_users_departments_departmentid");

                    b.HasOne("AppTemplate.Domain.Entities.Settings.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("fk_users_designations_designationid");

                    b.HasOne("AppTemplate.Domain.Entities.Admin.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_usertypes_usertypeid");

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("AppTemplate.Domain.Entities.Admin.Role", b =>
                {
                    b.HasOne("AppTemplate.Domain.Entities.Admin.ApplicationUser", null)
                        .WithMany("Role")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("fk_roles_users_applicationuserid");
                });

            modelBuilder.Entity("AppTemplate.Domain.Entities.Admin.RoleMenuPermission", b =>
                {
                    b.HasOne("AppTemplate.Domain.Entities.Admin.Menu", "Menu")
                        .WithMany("RoleMenuPermission")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rolemenupermissions_menus_menuid");

                    b.HasOne("AppTemplate.Domain.Entities.Admin.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rolemenupermissions_roles_roleid");

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AppTemplate.Domain.Entities.Admin.ApplicationUser", b =>
                {
                    b.Navigation("Role");
                });

            modelBuilder.Entity("AppTemplate.Domain.Entities.Admin.Menu", b =>
                {
                    b.Navigation("RoleMenuPermission");
                });
#pragma warning restore 612, 618
        }
    }
}
